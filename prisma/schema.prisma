// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  LEARNER
  INSTRUCTOR
  ADMIN
}

enum TypeExercise {
  QUIZZ
  IMAGE
  CODE
}

enum StatusRegisterInstructor {
  PROGRESSING
  REJECT
  SUCCESS
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum ContentType {
  LESSON
  EXERCISE
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  password            String?
  name                String
  image               String?
  bio                 String?
  facebook_id         String?
  youtube_id          String?
  titok_id            String?
  role                Role                 @default(LEARNER)
  registration_date   DateTime             @default(now())
  verify_date         DateTime?
  register_instructor RegisterInstructor[]
  course              Course[]
  forgot_password     PasswordResetToken[]
  //exercise            Exercise[]
  userProgress        UserProgress[]
  review              Review[]
  reply               ReviewReply[]
  server              Server[]
  member              Member[]
  channel             Channel[]
}

model PasswordResetToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  token        String   @unique
  token_expiry DateTime @default(now())
  user_id      String   @db.ObjectId
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  isDeleted    Boolean  @default(false)
}

model Topic {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  slug   String?  @unique
  title  String
  course Course[]
}

model Course {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  topic_id         String?        @db.ObjectId
  topic            Topic?         @relation(fields: [topic_id], references: [id])
  owner_id         String         @db.ObjectId
  owner            User           @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  title            String         @unique
  description      String?
  learning_outcome String[]
  requirement      String[]
  slug             String         @unique
  picture          String?
  chapters         Chapter[]
  isPublished      Boolean        @default(false)
  create_at        DateTime       @default(now())
  update_at        DateTime       @updatedAt
  userProgress     UserProgress[]
  review           Review[]
}

model Chapter {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  token       String    @unique()
  description String?
  position    Int
  isPublished Boolean   @default(false)
  contents    Content[]
  courseId    String    @db.ObjectId
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  token           String         @unique
  title           String
  description     String?
  //position        Int
  isPublished     Boolean        @default(false)
  videoUrl        String?
  duration        Int?
  isCompleteVideo Boolean        @default(false)
  //isPreview       Boolean   @default(true)
  thumbnail       String?
  //amountToPass    Int       @default(0)
  // exerciseId      String?   @db.ObjectId
  // exercise        Exercise? @relation(fields: [exerciseId], references: [id])
  contentId       String         @unique @db.ObjectId
  content         Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  userProgress    UserProgress[]
  attachment      Attachment[]
}

model Content {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  type      ContentType
  chapterId String      @db.ObjectId
  chapter   Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  position  Int
  lesson    Lesson?
  exercise  Exercise?
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  content   String
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  reply ReviewReply[]
}

model ReviewReply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId  String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reply     String
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model Exercise {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  token        String       @unique
  title        String
  type         TypeExercise
  // instructorId String       @db.ObjectId
  // instructor   User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  contentId    String       @unique @db.ObjectId
  content      Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  create_at    DateTime     @default(now())
  update_at    DateTime     @updatedAt
  isOpen       Boolean      @default(false)
  //lesson       Lesson[]
  quizz        Quizz[]
}

model Quizz {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique
  question    String
  answer      String?
  option      String[]
  position    Int
  isPublished Boolean  @default(false)
  exerciseId  String   @db.ObjectId
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  explain     String?
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String   @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonId    String   @db.ObjectId
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  isPassed    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userProgressQuiz UserProgressQuiz[]

  @@unique([userId, lessonId])
}

model UserProgressQuiz {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  quizzId        String
  answer         String
  userProgressId String       @db.ObjectId
  userProgress   UserProgress @relation(fields: [userProgressId], references: [id], onDelete: Cascade)
  isCorrect      Boolean      @default(false)
  createdAt      DateTime     @default(now())
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  lessonId  String   @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegisterInstructor {
  id        String                   @id @default(auto()) @map("_id") @db.ObjectId
  token     String                   @unique
  userId    String                   @db.ObjectId
  user      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  file      String
  status    StatusRegisterInstructor @default(PROGRESSING)
  reply     String?
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

model Server {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  name       String
  imageUrl   String
  inviteCode String   @unique
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt

  members  Member[]
  channels Channel[]
}

model Member {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  token  String     @unique
  role   MemberRole @default(GUEST)
  userId String     @db.ObjectId
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  message       Message[]
  directMessage DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOwner")
  conversationsReceived  Conversation[] @relation("MemberGuest")

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@unique([serverId, userId])
}

model Channel {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  token String      @unique
  name  String
  type  ChannelType @default(TEXT)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  message Message[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Message {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  fileUrl  String?
  memberId String  @db.ObjectId
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Conversation {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  memberOwnerId String @db.ObjectId
  memberOwner   Member @relation("MemberOwner", fields: [memberOwnerId], references: [id], onDelete: Cascade)

  memberGuestId String @db.ObjectId
  memberGuest   Member @relation("MemberGuest", fields: [memberGuestId], references: [id], onDelete: Cascade)

  directMessage DirectMessage[]

  @@unique([memberOwnerId, memberGuestId])
}

model DirectMessage {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  fileUrl  String?
  memberId String  @db.ObjectId
  member   Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
