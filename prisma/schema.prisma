// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  LEARNER
  INSTRUCTOR
  ADMIN
}

enum TypeExercise {
  QUIZZ
  IMAGE
  CODE
}

model User {
  id                String               @id @default(auto()) @map("_id") @db.ObjectId
  email             String               @unique
  password          String?
  name              String
  image             String?
  bio               String?
  facebook_id       String?
  youtube_id        String?
  titok_id          String?
  role              Role                 @default(LEARNER)
  registration_date DateTime             @default(now())
  verify_date       DateTime?
  course            Course[]
  forgot_password   PasswordResetToken[]
  exercise          Exercise[]
  userProgress      UserProgress[]
}

model PasswordResetToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  token        String   @unique
  token_expiry DateTime @default(now())
  user_id      String   @db.ObjectId
  user         User     @relation(fields: [user_id], references: [id])
  isDeleted    Boolean  @default(false)
}

model Topic {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  slug   String?  @unique
  title  String
  course Course[]
}

model Course {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  topic_id         String?   @db.ObjectId
  topic            Topic?    @relation(fields: [topic_id], references: [id])
  owner_id         String    @db.ObjectId
  owner            User      @relation(fields: [owner_id], references: [id])
  title            String    @unique
  description      String?
  learning_outcome String[]
  requirement      String[]
  slug             String    @unique
  picture          String?
  chapters         Chapter[]
  isPublished      Boolean   @default(false)
  create_at        DateTime  @default(now())
  update_at        DateTime  @updatedAt
}

model Chapter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  token       String   @unique()
  description String?
  position    Int
  isPublished Boolean  @default(false)
  lessons     Lesson[]
  courseId    String   @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  token           String  @unique
  title           String
  description     String?
  position        Int
  isPublished     Boolean @default(false)
  videoUrl        String?
  duration        Int?
  isCompleteVideo Boolean @default(false)
  thumbnail       String?
  chapterId       String  @db.ObjectId
  chapter         Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  exerciseId String?   @db.ObjectId
  exercise   Exercise? @relation(fields: [exerciseId], references: [id])

  userProgress UserProgress[]
}

model Exercise {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  token        String       @unique
  title        String
  type         TypeExercise
  instructorId String       @db.ObjectId
  instructor   User         @relation(fields: [instructorId], references: [id])
  create_at    DateTime     @default(now())
  update_at    DateTime     @updatedAt
  isOpen       Boolean      @default(false)
  lesson       Lesson[]
  quizz        Quizz[]
}

model Quizz {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique
  question    String
  answer      String?
  option      String[]
  position    Int
  isPublished Boolean  @default(false)
  exerciseId  String   @db.ObjectId
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  explain     String?
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String   @db.ObjectId
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  score       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userProgressQuiz UserProgressQuiz[]

  @@unique([userId, lessonId])
}

model UserProgressQuiz {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  quizzId        String
  answer         String
  userProgressId String       @db.ObjectId
  userProgress   UserProgress @relation(fields: [userProgressId], references: [id], onDelete: Cascade)
  isCorrect      Boolean      @default(false)
  createdAt   DateTime @default(now())
}
